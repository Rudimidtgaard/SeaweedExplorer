@page "/seaweed/list/{currentPage:int?}"
@inject IDbContextFactory<SeaweedDbContext> ContextFactory;
@inject NavigationManager NavigationManager;
@inject StateContainer StateContainer;
@inject IJSRuntime JS;

<PageTitle>Seaweed</PageTitle>

<h1>Seaweed</h1>

@if (Seaweeds is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/seaweed/list/@(CurrentPage -1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/seaweed/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/seaweed/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>

    <table class="table table-striped">
        <thead>
            <tr>
                <td>Common name</td>
                <td>Latin name</td>
                <td>Is Native</td>
                <td>Class</td>
                <td>#</td>

            </tr>
        </thead>
        <tbody>
            @foreach (var seaweed in Seaweeds)
            {
                <tr>
                    <td>@seaweed.NameCommon</td>
                    <td>@seaweed.NameLatin</td>
                    <td>@seaweed.Native</td>
                    <td>@seaweed.SeaweedClass?.NameCommon</td>
                    <td class="btn-group-sm">
                        <a href="/seaweed/edit/@seaweed.Id"
                        class="btn btn-outline-primary">
                        Edit
                        </a>
                        <button class="btn btn-outline-danger"
                            @onclick="() => HandleDelete(seaweed)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    private Seaweed[]? Seaweeds { get; set; }

    private const int ItemsPerPage = 5;

    private int TotalPages { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/seaweed/list/1");
            return;
        }

        using var context = ContextFactory.CreateDbContext();

        var seaweedCount = await context.Seaweed.CountAsync();
        TotalPages = seaweedCount == 0 
        ? 1
        : (int) Math.Ceiling((double)seaweedCount / ItemsPerPage);

        if(CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/seaweed/list/{TotalPages}");
            return;
        }

        StateContainer.SeaweedOverviewPage = CurrentPage.Value;

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        Seaweeds = await context.Seaweed
        .Include(emp => emp.SeaweedClass)
        .OrderBy(emp => emp.NameCommon)
        .Skip(itemsToSkip)
        .Take(ItemsPerPage)
        .ToArrayAsync();
    }

    private async Task HandleDelete(Seaweed seaweed)
    {
        var IsOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete seaweed: {seaweed.NameCommon}?");

        if(IsOk)
        {

            try
            {
                using var context = ContextFactory.CreateDbContext();

                context.Seaweed.Remove(seaweed);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // In this case, just continue and reload the data
            }

            await LoadData();
        }

    }
}