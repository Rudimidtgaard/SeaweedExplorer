@page "/Seaweed/edit/{seaweedId:int}"
@inject IDbContextFactory<SeaweedDbContext> ContectFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer;

<PageTitle>Edit Seaweed</PageTitle>

<h1>Edit Seaweed</h1>

@if(Seaweed is null && !IsBusy)
{
    <div class="alert alert-danger">Seaweed with Id @SeaweedId was not found.</div>
}
else
{
    <SeaweedForm Seaweed="@Seaweed"
        SeaweedClasses="@SeaweedClasses"
        IsEdit="true"
        IsBusy="@IsBusy"
        OnSubmit="@HandleSubmit"
        OnCancel="@NavigateToOverviewPage"/>
}

@if(ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    [Parameter]
    public int SeaweedId { get; set; }

    private Seaweed? Seaweed { get; set; }
    private SeaweedClass[]? SeaweedClasses { get; set; }

    private bool IsBusy { get; set; }
    private string? ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsBusy = true;

        try
        {
            using var context = ContectFactory.CreateDbContext();

            SeaweedClasses = await context.SeaweedClass
                        .AsNoTracking()
                        .OrderBy(cla => cla.NameCommon)
                        .ToArrayAsync();

            Seaweed = await context.Seaweed
                        .AsNoTracking()
                        .FirstOrDefaultAsync(sw => sw.Id == SeaweedId);
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task HandleSubmit(bool isValid)
    {
        if(Seaweed is null || IsBusy || !isValid)
        {
            ErrorMessage = null;
            return;
        }

        IsBusy = true;

        try
        {
            using var context = ContectFactory.CreateDbContext();
            context.Update(Seaweed);
            await context.SaveChangesAsync();

            NavigateToOverviewPage();
        }
        catch(DbUpdateConcurrencyException)
        {
            ErrorMessage = "This seaweed was modified by another user. Reload page and try again";
        }
        catch(Exception e)
        {
            ErrorMessage = $"Error while saving seaweed. Error message: {e.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void NavigateToOverviewPage()
    {
        NavigationManager.NavigateTo($"/seaweed/list/{StateContainer.SeaweedOverviewPage}");
    }
}
